import Head from "next/head";
import { useState } from "react";

import xlsx from "node-xlsx";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  LineController,
  LineElement,
  PointElement,
} from "chart.js";
import { Line } from "react-chartjs-2";

import Box from "../components/Box";

ChartJS.register(
  CategoryScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  LineController,
  LineElement,
  PointElement,
  LinearScale
);

export default function Home() {
  const [header, setHeader] = useState([]);
  const [body, setBody] = useState([]);
  const [chartData, setChartData] = useState({});

  const groupByDay = (data, daysLimit) => {
    if (daysLimit) {
      data = data.filter((item) => {
        const today = new Date();
        const date = new Date(item["Date(UTC)"]);
        const diff = today.getTime() - date.getTime();
        const diffDays = Math.ceil(diff / (1000 * 3600 * 24));
        return diffDays <= daysLimit;
      });
    }
    const grouped = data
      .sort((item) => new Date(item["Date(UTC)"]) - new Date())
      .reduce((acc, cur) => {
        const date = new Date(cur["Date(UTC)"]);
        const day = date.getDate();
        const month = date.getMonth() + 1; // months are zero indexed
        const year = date.getFullYear();
        const key = `${year}-${month}-${day}`;
        if (!acc[key]) {
          acc[key] = [];
        }
        acc[key].push(cur);
        return acc;
      }, {});
    return grouped;
  };

  const getTotalHolded = (data) => {
    let total = 0;
    data.forEach((item) => {
      if (item.Type === "BUY") {
        total += +item.Amount;
      } else {
        total -= +item.Amount;
      }
    });
    return total.toFixed(2);
  };

  const getBuyAveragePrice = (data, days = -1) => {
    let total = 0;
    let amount = 0;
    if (days !== -1) {
      data = data.filter((item) => {
        const today = new Date();
        const date = new Date(item["Date(UTC)"]);
        const diff = today.getTime() - date.getTime();
        const diffDays = Math.ceil(diff / (1000 * 3600 * 24));
        return diffDays <= days;
      });
    }
    data.forEach((item) => {
      if (item.Type === "BUY") {
        total += +item.Total;
        amount += +item.Amount;
      }
    });
    return (total / amount).toFixed(2);
  };

  const loadFile = (e) => {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.readAsArrayBuffer(file);
    reader.onload = function (e) {
      const data = e.target.result;
      const workbook = xlsx.parse(data);
      const sheet = workbook[0].data;
      const header = sheet[0];
      const result = sheet
        .map((item) => {
          return item.reduce((acc, cur, index) => {
            acc[header[index]] = cur;
            return acc;
          }, {});
        })
        .slice(1);
      setHeader(header);
      setBody(result);
      setChartData(groupByDay(result, 15));
    };
  };

  return (
    <div className="container">
      <Head>
        <title>Crypto Avg. Price</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form
        style={{
          marginBottom: "1rem",
        }}
      >
        <input type={"file"} onInput={loadFile} />
      </form>

      {body.length > 0 && (
        <>
          <Box cols="3">
            <div>
              <p>Estimated Balance</p>
              <strong>{getTotalHolded(body)}</strong>
            </div>
            <div>
              <p>Avg. Buy Price</p>
              <strong>{getBuyAveragePrice(body)}</strong>
            </div>
            <div>
              <p>30 Days Avg. Buy Price</p>
              <strong>{getBuyAveragePrice(body, 30)}</strong>
            </div>
          </Box>
          <Line
            data={{
              labels: Object.keys(chartData),
              datasets: [
                {
                  label: "Amount",
                  data: Object.keys(chartData).map((label) =>
                    getTotalHolded(chartData[label])
                  ),
                },
                {
                  label: "Avg. Buy Price",
                  data: Object.keys(chartData).map((label) =>
                    getBuyAveragePrice(chartData[label])
                  ),
                  backgroundColor: "rgba(255, 99, 132, 0.2)",
                  borderColor: "rgba(255, 99, 132, 1)",
                  hidden: true,
                },
              ],
            }}
          />
          <div
            style={{
              marginTop: "1rem",
            }}
          />
          <Box>
            <table>
              <thead>
                <tr>
                  {header.map((item) => {
                    return <th key={item}>{item}</th>;
                  })}
                </tr>
              </thead>
              <tbody>
                {body.map((coin, i) => (
                  <tr key={i}>
                    {Object.keys(coin).map((key) => {
                      return (
                        <td
                          key={key}
                          style={
                            key === "Type"
                              ? coin[key] === "BUY"
                                ? {
                                  color: "green",
                                }
                                : {
                                  color: "red",
                                }
                              : {}
                          }
                        >
                          {coin[key]}
                        </td>
                      );
                    })}
                  </tr>
                ))}
              </tbody>
            </table>
          </Box>
        </>
      )}
    </div>
  );
}
